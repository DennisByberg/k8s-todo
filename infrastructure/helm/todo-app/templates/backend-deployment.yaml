apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-backend
  namespace: {{ .Release.Namespace }}
  labels:
    app: backend
    environment: {{ .Values.environment }}
spec:
  replicas: {{ .Values.backend.replicaCount }}
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      # Wait for postgres to be ready before starting backend
      initContainers:
        - name: wait-for-postgres
          image: busybox:1.36
          command:
            - sh
            - -c
            - |
              until nc -z {{ .Release.Name }}-postgres 5432; do
                echo "Waiting for postgres..."
                sleep 2
              done
              echo "Postgres is ready!"
      containers:
        - name: backend
          {{- if .Values.imageRegistry }}
          image: "{{ .Values.imageRegistry }}/{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
          {{- else }}
          image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
          {{- end }}
          imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          env:
            - name: DATABASE_URL
              value: "postgresql://postgres:postgres@{{ .Release.Name }}-postgres:5432/todos"
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            {{- toYaml .Values.backend.resources | nindent 12 }}