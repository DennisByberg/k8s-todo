name: Deploy to AKS

on:
  workflow_run:
    workflows: ['CI - Build & Push']
    types:
      - completed
    branches:
      - main
  workflow_dispatch:

env:
  ACR_NAME: acrk8stododev
  AKS_RESOURCE_GROUP: rg-k8s-todo-dev
  AKS_CLUSTER_NAME: aks-k8s-todo-dev
  NAMESPACE: todo-app

jobs:
  deploy:
    name: Deploy to AKS
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        run: |
          az aks get-credentials \
            --resource-group ${{ env.AKS_RESOURCE_GROUP }} \
            --name ${{ env.AKS_CLUSTER_NAME }} \
            --overwrite-existing

      - name: Verify cluster connection
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Check current deployment status
        run: |
          echo "üìä Current deployment status:"
          kubectl get pods -n ${{ env.NAMESPACE }} -o wide || echo "Namespace not found"

      - name: Restart backend deployment
        run: |
          echo "üîÑ Restarting backend..."
          kubectl rollout restart deployment/todo-app-backend -n ${{ env.NAMESPACE }}

      - name: Wait for backend rollout
        run: |
          echo "‚è≥ Waiting for backend to be ready..."
          kubectl rollout status deployment/todo-app-backend -n ${{ env.NAMESPACE }} --timeout=5m

      - name: Restart frontend deployment
        run: |
          echo "üîÑ Restarting frontend..."
          kubectl rollout restart deployment/todo-app-frontend -n ${{ env.NAMESPACE }}

      - name: Wait for frontend rollout
        run: |
          echo "‚è≥ Waiting for frontend to be ready..."
          kubectl rollout status deployment/todo-app-frontend -n ${{ env.NAMESPACE }} --timeout=5m

      - name: Verify deployment
        run: |
          echo "‚úÖ Deployment complete! Final status:"
          kubectl get pods -n ${{ env.NAMESPACE }}
          echo ""
          echo "üìù Recent events:"
          kubectl get events -n ${{ env.NAMESPACE }} --sort-by='.lastTimestamp' | tail -10

      - name: Get application URL
        run: |
          INGRESS_IP=$(kubectl get svc -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "üåê Application URL: http://$INGRESS_IP"
          echo "üìä API Health: http://$INGRESS_IP/health"
          echo "üìö API Docs: http://$INGRESS_IP/api/docs"

      - name: Health check
        run: |
          echo "üè• Running health checks..."
          INGRESS_IP=$(kubectl get svc -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

          # Wait for ingress to be ready
          sleep 10

          # Check backend health
          curl -f http://$INGRESS_IP/health || echo "‚ö†Ô∏è Backend health check failed"

          # Check frontend
          curl -f -I http://$INGRESS_IP || echo "‚ö†Ô∏è Frontend health check failed"
